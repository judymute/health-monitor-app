{"ast":null,"code":"var _jsxFileName = \"/Users/jlam/Documents/GitHub/health-monitor-app/client/src/QuestionnaireContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport BasicInformation from './BasicInformation';\nimport DietaryPreferences from './DietaryPreferences';\nimport MedicalConditions from './MedicalConditions';\nimport './QuestionnaireContainer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionnaireContainer = ({\n  onComplete,\n  userData = null\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [isSubmitting, setIsSubmitting] = useState(false); // Add loading state for form submission\n  const [error, setError] = useState(null); // Add error state\n\n  // Initialize with userData if provided or use default structure\n  const [collectedData, setCollectedData] = useState(userData || {\n    basicInformation: {},\n    dietaryPreferences: {},\n    medicalConditions: {\n      diabetes: {\n        selected: false,\n        type: ''\n      },\n      inflammatoryBowelDisease: {\n        selected: false,\n        type: ''\n      },\n      other: {\n        selected: false,\n        details: ''\n      }\n    },\n    dietaryGoals: {\n      other: {\n        selected: false,\n        details: ''\n      }\n    },\n    lifestyleInformation: {},\n    mealPreferences: {}\n  });\n  const handleStepComplete = (sectionName, data) => {\n    let updatedData = {\n      ...collectedData\n    };\n    if (sectionName === 'combined') {\n      // For the medical conditions step, we need to split the data\n      updatedData = {\n        ...updatedData,\n        medicalConditions: data.medicalConditions,\n        dietaryGoals: data.dietaryGoals\n      };\n    } else {\n      updatedData = {\n        ...updatedData,\n        [sectionName]: data\n      };\n    }\n    setCollectedData(updatedData);\n    if (currentStep === totalSteps) {\n      // Add code to send data to server\n      console.log('Sending data to server:', updatedData);\n      setIsSubmitting(true); // Set loading state\n      setError(null); // Clear any previous errors\n\n      fetch('http://localhost:3001/api/updateUserProfile', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedData)\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error('Server responded with an error');\n        }\n        return response.json();\n      }).then(result => {\n        console.log('Server response:', result);\n        setIsSubmitting(false);\n        if (result.success) {\n          // After successful save, generate meal plan\n          return fetch('http://localhost:3001/api/generateMealPlan', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n        } else {\n          throw new Error(result.message || 'Unknown error occurred');\n        }\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error('Failed to generate meal plan');\n        }\n        return response.json();\n      }).then(mealPlanResult => {\n        console.log('Meal plan generated:', mealPlanResult);\n        // Complete the process\n        onComplete(updatedData);\n        navigate('/dashboard');\n      }).catch(error => {\n        console.error('Error saving data:', error);\n        setIsSubmitting(false);\n        setError('Error connecting to the server. Please try again later.');\n      });\n    } else {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n  const handlePrevStep = () => {\n    setCurrentStep(Math.max(1, currentStep - 1));\n  };\n\n  // In this version, we're implementing just the first 3 steps from the questionnaire\n  const totalSteps = 3;\n  const renderCurrentStep = () => {\n    switch (currentStep) {\n      case 1:\n        return /*#__PURE__*/_jsxDEV(BasicInformation, {\n          onSave: data => handleStepComplete('basicInformation', data),\n          prevData: collectedData.basicInformation,\n          onPrevious: null // First step doesn't have a previous button\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this);\n      case 2:\n        return /*#__PURE__*/_jsxDEV(DietaryPreferences, {\n          onSave: data => handleStepComplete('dietaryPreferences', data),\n          prevData: collectedData.dietaryPreferences,\n          onPrevious: handlePrevStep\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this);\n      case 3:\n        // For the medical conditions step, we need to combine both medical conditions and dietary goals\n        return /*#__PURE__*/_jsxDEV(MedicalConditions, {\n          onSave: data => {\n            // Split the data into the separate sections for the JSON structure\n            const {\n              medicalConditions,\n              dietaryGoals\n            } = data;\n            handleStepComplete('combined', {\n              medicalConditions,\n              dietaryGoals\n            });\n          },\n          prevData: {\n            medicalConditions: collectedData.medicalConditions,\n            dietaryGoals: collectedData.dietaryGoals\n          },\n          onPrevious: handlePrevStep\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Unknown step\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  const progressPercentage = (currentStep - 1) / (totalSteps - 1) * 100;\n\n  // Steps data for the step indicator\n  const steps = [{\n    name: \"Basic Information\",\n    number: 1\n  }, {\n    name: \"Dietary Preferences\",\n    number: 2\n  }, {\n    name: \"Medical Conditions\",\n    number: 3\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questionnaire-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"questionnaire-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"questionnaire-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"questionnaire-title\",\n          children: \"Health Profile Questionnaire\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"questionnaire-subtitle\",\n          children: \"Please complete this questionnaire to receive personalized health recommendations\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"steps-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-line-bg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-line-fill\",\n            style: {\n              width: `${progressPercentage}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this), steps.map((step, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"step-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: `step-circle ${currentStep >= step.number ? 'step-circle-active' : 'step-circle-inactive'}`,\n              children: step.number\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `step-label ${currentStep === step.number ? 'step-label-active' : 'step-label-inactive'}`,\n              children: step.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"step-counter-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"step-counter\",\n            children: [\"Step \", currentStep, \" of \", totalSteps]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-section\",\n        children: isSubmitting ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-overlay\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loading-spinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Saving your data and generating meal plan...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: [error, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setError(null),\n            children: \"Try Again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this) : renderCurrentStep()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionnaireContainer, \"yhIfu23ZuUjVyo1J/DzTq3yknlA=\", false, function () {\n  return [useNavigate];\n});\n_c = QuestionnaireContainer;\nexport default QuestionnaireContainer;\nvar _c;\n$RefreshReg$(_c, \"QuestionnaireContainer\");","map":{"version":3,"names":["React","useState","useNavigate","BasicInformation","DietaryPreferences","MedicalConditions","jsxDEV","_jsxDEV","QuestionnaireContainer","onComplete","userData","_s","navigate","currentStep","setCurrentStep","isSubmitting","setIsSubmitting","error","setError","collectedData","setCollectedData","basicInformation","dietaryPreferences","medicalConditions","diabetes","selected","type","inflammatoryBowelDisease","other","details","dietaryGoals","lifestyleInformation","mealPreferences","handleStepComplete","sectionName","data","updatedData","totalSteps","console","log","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","json","result","success","message","mealPlanResult","catch","handlePrevStep","Math","max","renderCurrentStep","onSave","prevData","onPrevious","fileName","_jsxFileName","lineNumber","columnNumber","children","progressPercentage","steps","name","number","className","style","width","map","step","index","onClick","_c","$RefreshReg$"],"sources":["/Users/jlam/Documents/GitHub/health-monitor-app/client/src/QuestionnaireContainer.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport BasicInformation from './BasicInformation';\nimport DietaryPreferences from './DietaryPreferences';\nimport MedicalConditions from './MedicalConditions';\nimport './QuestionnaireContainer.css';\n\nconst QuestionnaireContainer = ({ onComplete, userData = null }) => {\n  const navigate = useNavigate();\n  \n  const [currentStep, setCurrentStep] = useState(1);\n  const [isSubmitting, setIsSubmitting] = useState(false); // Add loading state for form submission\n  const [error, setError] = useState(null); // Add error state\n  \n  // Initialize with userData if provided or use default structure\n  const [collectedData, setCollectedData] = useState(userData || {\n    basicInformation: {},\n    dietaryPreferences: {},\n    medicalConditions: {\n      diabetes: { selected: false, type: '' },\n      inflammatoryBowelDisease: { selected: false, type: '' },\n      other: { selected: false, details: '' }\n    },\n    dietaryGoals: {\n      other: { selected: false, details: '' }\n    },\n    lifestyleInformation: {},\n    mealPreferences: {}\n  });\n\n  const handleStepComplete = (sectionName, data) => {\n    let updatedData = { ...collectedData };\n    \n    if (sectionName === 'combined') {\n      // For the medical conditions step, we need to split the data\n      updatedData = {\n        ...updatedData,\n        medicalConditions: data.medicalConditions,\n        dietaryGoals: data.dietaryGoals\n      };\n    } else {\n      updatedData = {\n        ...updatedData,\n        [sectionName]: data\n      };\n    }\n    \n    setCollectedData(updatedData);\n    \n    if (currentStep === totalSteps) {\n      // Add code to send data to server\n      console.log('Sending data to server:', updatedData);\n      \n      setIsSubmitting(true); // Set loading state\n      setError(null); // Clear any previous errors\n      \n      fetch('http://localhost:3001/api/updateUserProfile', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedData)\n      })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Server responded with an error');\n        }\n        return response.json();\n      })\n      .then(result => {\n        console.log('Server response:', result);\n        setIsSubmitting(false);\n        \n        if (result.success) {\n          // After successful save, generate meal plan\n          return fetch('http://localhost:3001/api/generateMealPlan', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n        } else {\n          throw new Error(result.message || 'Unknown error occurred');\n        }\n      })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Failed to generate meal plan');\n        }\n        return response.json();\n      })\n      .then(mealPlanResult => {\n        console.log('Meal plan generated:', mealPlanResult);\n        // Complete the process\n        onComplete(updatedData);\n        navigate('/dashboard');\n      })\n      .catch(error => {\n        console.error('Error saving data:', error);\n        setIsSubmitting(false);\n        setError('Error connecting to the server. Please try again later.');\n      });\n    } else {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handlePrevStep = () => {\n    setCurrentStep(Math.max(1, currentStep - 1));\n  };\n  \n  // In this version, we're implementing just the first 3 steps from the questionnaire\n  const totalSteps = 3;\n  \n  const renderCurrentStep = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <BasicInformation \n            onSave={(data) => handleStepComplete('basicInformation', data)}\n            prevData={collectedData.basicInformation}\n            onPrevious={null} // First step doesn't have a previous button\n          />\n        );\n      case 2:\n        return (\n          <DietaryPreferences \n            onSave={(data) => handleStepComplete('dietaryPreferences', data)} \n            prevData={collectedData.dietaryPreferences}\n            onPrevious={handlePrevStep}\n          />\n        );\n      case 3:\n        // For the medical conditions step, we need to combine both medical conditions and dietary goals\n        return (\n          <MedicalConditions \n            onSave={(data) => {\n              // Split the data into the separate sections for the JSON structure\n              const { medicalConditions, dietaryGoals } = data;\n              \n              handleStepComplete('combined', { \n                medicalConditions, \n                dietaryGoals \n              });\n            }}\n            prevData={{\n              medicalConditions: collectedData.medicalConditions,\n              dietaryGoals: collectedData.dietaryGoals\n            }}\n            onPrevious={handlePrevStep}\n          />\n        );\n      default:\n        return <div>Unknown step</div>;\n    }\n  };\n\n  const progressPercentage = ((currentStep - 1) / (totalSteps - 1)) * 100;\n\n  // Steps data for the step indicator\n  const steps = [\n    { name: \"Basic Information\", number: 1 },\n    { name: \"Dietary Preferences\", number: 2 },\n    { name: \"Medical Conditions\", number: 3 }\n  ];\n\n  return (\n    <div className=\"questionnaire-container\">\n      <div className=\"questionnaire-card\">\n        <div className=\"questionnaire-header\">\n          <h1 className=\"questionnaire-title\">Health Profile Questionnaire</h1>\n          <p className=\"questionnaire-subtitle\">\n            Please complete this questionnaire to receive personalized health recommendations\n          </p>\n        </div>\n        \n        {/* Step indicator and progress */}\n        <div className=\"steps-section\">\n          {/* Progress indicator */}\n          <div className=\"progress-container\">\n            {/* Progress line */}\n            <div className=\"progress-line-bg\"></div>\n            \n            {/* Completed progress line */}\n            <div \n              className=\"progress-line-fill\" \n              style={{ width: `${progressPercentage}%` }}\n            ></div>\n            \n            {/* Step circles */}\n            {steps.map((step, index) => (\n              <div key={index} className=\"step-container\">\n                <div \n                  className={`step-circle ${\n                    currentStep >= step.number ? 'step-circle-active' : 'step-circle-inactive'\n                  }`}\n                >\n                  {step.number}\n                </div>\n                <div \n                  className={`step-label ${\n                    currentStep === step.number ? 'step-label-active' : 'step-label-inactive'\n                  }`}\n                >\n                  {step.name}\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          {/* Step counter */}\n          <div className=\"step-counter-container\">\n            <div className=\"step-counter\">\n              Step {currentStep} of {totalSteps}\n            </div>\n          </div>\n        </div>\n        \n        {/* Current step content */}\n        <div className=\"content-section\">\n          {isSubmitting ? (\n            <div className=\"loading-overlay\">\n              <div className=\"loading-spinner\"></div>\n              <p>Saving your data and generating meal plan...</p>\n            </div>\n          ) : error ? (\n            <div className=\"error-message\">\n              {error}\n              <button onClick={() => setError(null)}>Try Again</button>\n            </div>\n          ) : (\n            renderCurrentStep()\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default QuestionnaireContainer;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,kBAAkB,MAAM,sBAAsB;AACrD,OAAOC,iBAAiB,MAAM,qBAAqB;AACnD,OAAO,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,sBAAsB,GAAGA,CAAC;EAAEC,UAAU;EAAEC,QAAQ,GAAG;AAAK,CAAC,KAAK;EAAAC,EAAA;EAClE,MAAMC,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAE9B,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACzD,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1C;EACA,MAAM,CAACkB,aAAa,EAAEC,gBAAgB,CAAC,GAAGnB,QAAQ,CAACS,QAAQ,IAAI;IAC7DW,gBAAgB,EAAE,CAAC,CAAC;IACpBC,kBAAkB,EAAE,CAAC,CAAC;IACtBC,iBAAiB,EAAE;MACjBC,QAAQ,EAAE;QAAEC,QAAQ,EAAE,KAAK;QAAEC,IAAI,EAAE;MAAG,CAAC;MACvCC,wBAAwB,EAAE;QAAEF,QAAQ,EAAE,KAAK;QAAEC,IAAI,EAAE;MAAG,CAAC;MACvDE,KAAK,EAAE;QAAEH,QAAQ,EAAE,KAAK;QAAEI,OAAO,EAAE;MAAG;IACxC,CAAC;IACDC,YAAY,EAAE;MACZF,KAAK,EAAE;QAAEH,QAAQ,EAAE,KAAK;QAAEI,OAAO,EAAE;MAAG;IACxC,CAAC;IACDE,oBAAoB,EAAE,CAAC,CAAC;IACxBC,eAAe,EAAE,CAAC;EACpB,CAAC,CAAC;EAEF,MAAMC,kBAAkB,GAAGA,CAACC,WAAW,EAAEC,IAAI,KAAK;IAChD,IAAIC,WAAW,GAAG;MAAE,GAAGjB;IAAc,CAAC;IAEtC,IAAIe,WAAW,KAAK,UAAU,EAAE;MAC9B;MACAE,WAAW,GAAG;QACZ,GAAGA,WAAW;QACdb,iBAAiB,EAAEY,IAAI,CAACZ,iBAAiB;QACzCO,YAAY,EAAEK,IAAI,CAACL;MACrB,CAAC;IACH,CAAC,MAAM;MACLM,WAAW,GAAG;QACZ,GAAGA,WAAW;QACd,CAACF,WAAW,GAAGC;MACjB,CAAC;IACH;IAEAf,gBAAgB,CAACgB,WAAW,CAAC;IAE7B,IAAIvB,WAAW,KAAKwB,UAAU,EAAE;MAC9B;MACAC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEH,WAAW,CAAC;MAEnDpB,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;MACvBE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;MAEhBsB,KAAK,CAAC,6CAA6C,EAAE;QACnDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,WAAW;MAClC,CAAC,CAAC,CACDU,IAAI,CAACC,QAAQ,IAAI;QAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;QACnD;QACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACxB,CAAC,CAAC,CACDJ,IAAI,CAACK,MAAM,IAAI;QACdb,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEY,MAAM,CAAC;QACvCnC,eAAe,CAAC,KAAK,CAAC;QAEtB,IAAImC,MAAM,CAACC,OAAO,EAAE;UAClB;UACA,OAAOZ,KAAK,CAAC,4CAA4C,EAAE;YACzDC,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACP,cAAc,EAAE;YAClB;UACF,CAAC,CAAC;QACJ,CAAC,MAAM;UACL,MAAM,IAAIO,KAAK,CAACE,MAAM,CAACE,OAAO,IAAI,wBAAwB,CAAC;QAC7D;MACF,CAAC,CAAC,CACDP,IAAI,CAACC,QAAQ,IAAI;QAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;QACjD;QACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACxB,CAAC,CAAC,CACDJ,IAAI,CAACQ,cAAc,IAAI;QACtBhB,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEe,cAAc,CAAC;QACnD;QACA7C,UAAU,CAAC2B,WAAW,CAAC;QACvBxB,QAAQ,CAAC,YAAY,CAAC;MACxB,CAAC,CAAC,CACD2C,KAAK,CAACtC,KAAK,IAAI;QACdqB,OAAO,CAACrB,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;QAC1CD,eAAe,CAAC,KAAK,CAAC;QACtBE,QAAQ,CAAC,yDAAyD,CAAC;MACrE,CAAC,CAAC;IACJ,CAAC,MAAM;MACLJ,cAAc,CAACD,WAAW,GAAG,CAAC,CAAC;IACjC;EACF,CAAC;EAED,MAAM2C,cAAc,GAAGA,CAAA,KAAM;IAC3B1C,cAAc,CAAC2C,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE7C,WAAW,GAAG,CAAC,CAAC,CAAC;EAC9C,CAAC;;EAED;EACA,MAAMwB,UAAU,GAAG,CAAC;EAEpB,MAAMsB,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,QAAQ9C,WAAW;MACjB,KAAK,CAAC;QACJ,oBACEN,OAAA,CAACJ,gBAAgB;UACfyD,MAAM,EAAGzB,IAAI,IAAKF,kBAAkB,CAAC,kBAAkB,EAAEE,IAAI,CAAE;UAC/D0B,QAAQ,EAAE1C,aAAa,CAACE,gBAAiB;UACzCyC,UAAU,EAAE,IAAK,CAAC;QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnB,CAAC;MAEN,KAAK,CAAC;QACJ,oBACE3D,OAAA,CAACH,kBAAkB;UACjBwD,MAAM,EAAGzB,IAAI,IAAKF,kBAAkB,CAAC,oBAAoB,EAAEE,IAAI,CAAE;UACjE0B,QAAQ,EAAE1C,aAAa,CAACG,kBAAmB;UAC3CwC,UAAU,EAAEN;QAAe;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B,CAAC;MAEN,KAAK,CAAC;QACJ;QACA,oBACE3D,OAAA,CAACF,iBAAiB;UAChBuD,MAAM,EAAGzB,IAAI,IAAK;YAChB;YACA,MAAM;cAAEZ,iBAAiB;cAAEO;YAAa,CAAC,GAAGK,IAAI;YAEhDF,kBAAkB,CAAC,UAAU,EAAE;cAC7BV,iBAAiB;cACjBO;YACF,CAAC,CAAC;UACJ,CAAE;UACF+B,QAAQ,EAAE;YACRtC,iBAAiB,EAAEJ,aAAa,CAACI,iBAAiB;YAClDO,YAAY,EAAEX,aAAa,CAACW;UAC9B,CAAE;UACFgC,UAAU,EAAEN;QAAe;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B,CAAC;MAEN;QACE,oBAAO3D,OAAA;UAAA4D,QAAA,EAAK;QAAY;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;IAClC;EACF,CAAC;EAED,MAAME,kBAAkB,GAAI,CAACvD,WAAW,GAAG,CAAC,KAAKwB,UAAU,GAAG,CAAC,CAAC,GAAI,GAAG;;EAEvE;EACA,MAAMgC,KAAK,GAAG,CACZ;IAAEC,IAAI,EAAE,mBAAmB;IAAEC,MAAM,EAAE;EAAE,CAAC,EACxC;IAAED,IAAI,EAAE,qBAAqB;IAAEC,MAAM,EAAE;EAAE,CAAC,EAC1C;IAAED,IAAI,EAAE,oBAAoB;IAAEC,MAAM,EAAE;EAAE,CAAC,CAC1C;EAED,oBACEhE,OAAA;IAAKiE,SAAS,EAAC,yBAAyB;IAAAL,QAAA,eACtC5D,OAAA;MAAKiE,SAAS,EAAC,oBAAoB;MAAAL,QAAA,gBACjC5D,OAAA;QAAKiE,SAAS,EAAC,sBAAsB;QAAAL,QAAA,gBACnC5D,OAAA;UAAIiE,SAAS,EAAC,qBAAqB;UAAAL,QAAA,EAAC;QAA4B;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACrE3D,OAAA;UAAGiE,SAAS,EAAC,wBAAwB;UAAAL,QAAA,EAAC;QAEtC;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAGN3D,OAAA;QAAKiE,SAAS,EAAC,eAAe;QAAAL,QAAA,gBAE5B5D,OAAA;UAAKiE,SAAS,EAAC,oBAAoB;UAAAL,QAAA,gBAEjC5D,OAAA;YAAKiE,SAAS,EAAC;UAAkB;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eAGxC3D,OAAA;YACEiE,SAAS,EAAC,oBAAoB;YAC9BC,KAAK,EAAE;cAAEC,KAAK,EAAE,GAAGN,kBAAkB;YAAI;UAAE;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACvC,CAAC,EAGNG,KAAK,CAACM,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACrBtE,OAAA;YAAiBiE,SAAS,EAAC,gBAAgB;YAAAL,QAAA,gBACzC5D,OAAA;cACEiE,SAAS,EAAE,eACT3D,WAAW,IAAI+D,IAAI,CAACL,MAAM,GAAG,oBAAoB,GAAG,sBAAsB,EACzE;cAAAJ,QAAA,EAEFS,IAAI,CAACL;YAAM;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACT,CAAC,eACN3D,OAAA;cACEiE,SAAS,EAAE,cACT3D,WAAW,KAAK+D,IAAI,CAACL,MAAM,GAAG,mBAAmB,GAAG,qBAAqB,EACxE;cAAAJ,QAAA,EAEFS,IAAI,CAACN;YAAI;cAAAP,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACP,CAAC;UAAA,GAdEW,KAAK;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAeV,CACN,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eAGN3D,OAAA;UAAKiE,SAAS,EAAC,wBAAwB;UAAAL,QAAA,eACrC5D,OAAA;YAAKiE,SAAS,EAAC,cAAc;YAAAL,QAAA,GAAC,OACvB,EAACtD,WAAW,EAAC,MAAI,EAACwB,UAAU;UAAA;YAAA0B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9B;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAGN3D,OAAA;QAAKiE,SAAS,EAAC,iBAAiB;QAAAL,QAAA,EAC7BpD,YAAY,gBACXR,OAAA;UAAKiE,SAAS,EAAC,iBAAiB;UAAAL,QAAA,gBAC9B5D,OAAA;YAAKiE,SAAS,EAAC;UAAiB;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACvC3D,OAAA;YAAA4D,QAAA,EAAG;UAA4C;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChD,CAAC,GACJjD,KAAK,gBACPV,OAAA;UAAKiE,SAAS,EAAC,eAAe;UAAAL,QAAA,GAC3BlD,KAAK,eACNV,OAAA;YAAQuE,OAAO,EAAEA,CAAA,KAAM5D,QAAQ,CAAC,IAAI,CAAE;YAAAiD,QAAA,EAAC;UAAS;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtD,CAAC,GAENP,iBAAiB,CAAC;MACnB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACvD,EAAA,CAtOIH,sBAAsB;EAAA,QACTN,WAAW;AAAA;AAAA6E,EAAA,GADxBvE,sBAAsB;AAwO5B,eAAeA,sBAAsB;AAAC,IAAAuE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}