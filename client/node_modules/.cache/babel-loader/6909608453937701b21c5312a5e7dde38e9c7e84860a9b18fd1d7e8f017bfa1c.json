{"ast":null,"code":"var _jsxFileName = \"/Users/jlam/Documents/GitHub/health-monitor-app/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport './App.css';\nimport UserDashboard from './UserDashboard';\nimport QuestionnaireContainer from './QuestionnaireContainer'; // Assuming you created this\nimport Chatbot from './Chatbot';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State to store user data and track if questionnaire is completed\n  const [userData, setUserData] = useState(null);\n  const [isQuestionnaireCompleted, setIsQuestionnaireCompleted] = useState(false);\n\n  // Function to handle saving user data from questionnaire\n  const handleSaveUserData = data => {\n    setUserData(data);\n    setIsQuestionnaireCompleted(true);\n  };\n  useEffect(() => {\n    // Fetch user data when the app loads\n    fetch('http://localhost:3001/api/getUserProfile').then(response => response.json()).then(data => {\n      var _data$basicInformatio;\n      console.log('Retrieved user data:', data);\n      setUserData(data);\n      // Check if user has completed the questionnaire (for example, if they have a name)\n      if ((_data$basicInformatio = data.basicInformation) !== null && _data$basicInformatio !== void 0 && _data$basicInformatio.fullName) {\n        setIsQuestionnaireCompleted(true);\n      }\n    }).catch(error => {\n      console.error('Error fetching user data:', error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/questionnaire\",\n          element: /*#__PURE__*/_jsxDEV(QuestionnaireContainer, {\n            onComplete: handleSaveUserData,\n            userData: userData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/dashboard\",\n          element: isQuestionnaireCompleted ? /*#__PURE__*/_jsxDEV(UserDashboard, {\n            userData: userData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n            to: \"/questionnaire\",\n            replace: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"*\",\n          element: isQuestionnaireCompleted ? /*#__PURE__*/_jsxDEV(Navigate, {\n            to: \"/dashboard\",\n            replace: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n            to: \"/questionnaire\",\n            replace: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chatbot, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xFDMHqORhF2in9gSQ9ZKwlC3was=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","Navigate","UserDashboard","QuestionnaireContainer","Chatbot","jsxDEV","_jsxDEV","App","_s","userData","setUserData","isQuestionnaireCompleted","setIsQuestionnaireCompleted","handleSaveUserData","data","fetch","then","response","json","_data$basicInformatio","console","log","basicInformation","fullName","catch","error","children","className","path","element","onComplete","fileName","_jsxFileName","lineNumber","columnNumber","to","replace","_c","$RefreshReg$"],"sources":["/Users/jlam/Documents/GitHub/health-monitor-app/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport './App.css';\nimport UserDashboard from './UserDashboard';\nimport QuestionnaireContainer from './QuestionnaireContainer'; // Assuming you created this\nimport Chatbot from './Chatbot';\n\nfunction App() {\n  // State to store user data and track if questionnaire is completed\n  const [userData, setUserData] = useState(null);\n  const [isQuestionnaireCompleted, setIsQuestionnaireCompleted] = useState(false);\n\n  // Function to handle saving user data from questionnaire\n  const handleSaveUserData = (data) => {\n    setUserData(data);\n    setIsQuestionnaireCompleted(true);\n  };\n\n  useEffect(() => {\n    // Fetch user data when the app loads\n    fetch('http://localhost:3001/api/getUserProfile')\n      .then(response => response.json())\n      .then(data => {\n        console.log('Retrieved user data:', data);\n        setUserData(data);\n        // Check if user has completed the questionnaire (for example, if they have a name)\n        if (data.basicInformation?.fullName) {\n          setIsQuestionnaireCompleted(true);\n        }\n      })\n      .catch(error => {\n        console.error('Error fetching user data:', error);\n      });\n  }, []);\n\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Routes>\n          {/* Route for the questionnaire */}\n          <Route \n            path=\"/questionnaire\" \n            element={\n              <QuestionnaireContainer \n                onComplete={handleSaveUserData} \n                userData={userData}\n              />\n            } \n          />\n          \n          {/* Route for the dashboard - protected, requires completed questionnaire */}\n          <Route \n            path=\"/dashboard\" \n            element={\n              isQuestionnaireCompleted ? \n                <UserDashboard userData={userData} /> : \n                <Navigate to=\"/questionnaire\" replace />\n            } \n          />\n          \n          {/* Default route - redirect to questionnaire or dashboard */}\n          <Route \n            path=\"*\" \n            element={\n              isQuestionnaireCompleted ? \n                <Navigate to=\"/dashboard\" replace /> : \n                <Navigate to=\"/questionnaire\" replace />\n            } \n          />\n        </Routes>\n        <Chatbot/>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}