{"ast":null,"code":"var _jsxFileName = \"/Users/jlam/Documents/GitHub/health-monitor-app/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport './App.css';\nimport UserDashboard from './UserDashboard';\nimport QuestionnaireContainer from './QuestionnaireContainer';\nimport LandingPage from './LandingPage';\nimport Chatbot from './Chatbot';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State to store user data and track if questionnaire is completed\n  const [userData, setUserData] = useState(null);\n  const [isQuestionnaireCompleted, setIsQuestionnaireCompleted] = useState(false);\n  const [loading, setLoading] = useState(true); // Add loading state\n\n  // Function to handle saving user data from questionnaire\n  const handleSaveUserData = data => {\n    setUserData(data);\n    setIsQuestionnaireCompleted(true);\n  };\n  useEffect(() => {\n    // Fetch user data when the app loads\n    setLoading(true);\n    fetch('http://localhost:3001/api/getUserProfile').then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      var _data$basicInformatio;\n      console.log('Retrieved user data:', data);\n      setUserData(data);\n\n      // Check if user has completed the questionnaire (for example, if they have a name)\n      if ((_data$basicInformatio = data.basicInformation) !== null && _data$basicInformatio !== void 0 && _data$basicInformatio.fullName) {\n        setIsQuestionnaireCompleted(true);\n      }\n      setLoading(false);\n    }).catch(error => {\n      console.error('Error fetching user data:', error);\n      // If there's an error (like user not found), still set loading to false\n      setLoading(false);\n    });\n  }, []);\n\n  // Show loading indicator while fetching data\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(LandingPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 22\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/questionnaire\",\n          element: /*#__PURE__*/_jsxDEV(QuestionnaireContainer, {\n            onComplete: handleSaveUserData,\n            userData: userData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/dashboard\",\n          element: isQuestionnaireCompleted ? /*#__PURE__*/_jsxDEV(UserDashboard, {\n            userData: userData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n            to: \"/questionnaire\",\n            replace: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"*\",\n          element: /*#__PURE__*/_jsxDEV(Navigate, {\n            to: \"/\",\n            replace: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 22\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chatbot, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+cjF5XsBWd61L5H7A/qDhv6VYFo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","Navigate","UserDashboard","QuestionnaireContainer","LandingPage","Chatbot","jsxDEV","_jsxDEV","App","_s","userData","setUserData","isQuestionnaireCompleted","setIsQuestionnaireCompleted","loading","setLoading","handleSaveUserData","data","fetch","then","response","ok","Error","json","_data$basicInformatio","console","log","basicInformation","fullName","catch","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","path","element","onComplete","to","replace","_c","$RefreshReg$"],"sources":["/Users/jlam/Documents/GitHub/health-monitor-app/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport './App.css';\nimport UserDashboard from './UserDashboard';\nimport QuestionnaireContainer from './QuestionnaireContainer';\nimport LandingPage from './LandingPage';\nimport Chatbot from './Chatbot';\n\nfunction App() {\n  // State to store user data and track if questionnaire is completed\n  const [userData, setUserData] = useState(null);\n  const [isQuestionnaireCompleted, setIsQuestionnaireCompleted] = useState(false);\n  const [loading, setLoading] = useState(true); // Add loading state\n\n  // Function to handle saving user data from questionnaire\n  const handleSaveUserData = (data) => {\n    setUserData(data);\n    setIsQuestionnaireCompleted(true);\n  };\n\n  useEffect(() => {\n    // Fetch user data when the app loads\n    setLoading(true);\n    fetch('http://localhost:3001/api/getUserProfile')\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then(data => {\n        console.log('Retrieved user data:', data);\n        setUserData(data);\n        \n        // Check if user has completed the questionnaire (for example, if they have a name)\n        if (data.basicInformation?.fullName) {\n          setIsQuestionnaireCompleted(true);\n        }\n        setLoading(false);\n      })\n      .catch(error => {\n        console.error('Error fetching user data:', error);\n        // If there's an error (like user not found), still set loading to false\n        setLoading(false);\n      });\n  }, []);\n\n  // Show loading indicator while fetching data\n  if (loading) {\n    return <div className=\"loading\">Loading...</div>;\n  }\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Routes>\n          {/* New route for the landing page */}\n          <Route \n            path=\"/\" \n            element={<LandingPage />} \n          />\n          \n          {/* Route for the questionnaire */}\n          <Route \n            path=\"/questionnaire\" \n            element={\n              <QuestionnaireContainer \n                onComplete={handleSaveUserData} \n                userData={userData}\n              />\n            } \n          />\n          \n          {/* Route for the dashboard - protected, requires completed questionnaire */}\n          <Route \n            path=\"/dashboard\" \n            element={\n              isQuestionnaireCompleted ? \n                <UserDashboard userData={userData} /> : \n                <Navigate to=\"/questionnaire\" replace />\n            } \n          />\n          \n          {/* Default route - redirect to landing page */}\n          <Route \n            path=\"*\" \n            element={<Navigate to=\"/\" replace />} \n          />\n        </Routes>\n        <Chatbot/>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;AACnF,OAAO,WAAW;AAClB,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,sBAAsB,MAAM,0BAA0B;AAC7D,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACiB,wBAAwB,EAAEC,2BAA2B,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAC/E,MAAM,CAACmB,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9C;EACA,MAAMqB,kBAAkB,GAAIC,IAAI,IAAK;IACnCN,WAAW,CAACM,IAAI,CAAC;IACjBJ,2BAA2B,CAAC,IAAI,CAAC;EACnC,CAAC;EAEDjB,SAAS,CAAC,MAAM;IACd;IACAmB,UAAU,CAAC,IAAI,CAAC;IAChBG,KAAK,CAAC,0CAA0C,CAAC,CAC9CC,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDJ,IAAI,CAACF,IAAI,IAAI;MAAA,IAAAO,qBAAA;MACZC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAET,IAAI,CAAC;MACzCN,WAAW,CAACM,IAAI,CAAC;;MAEjB;MACA,KAAAO,qBAAA,GAAIP,IAAI,CAACU,gBAAgB,cAAAH,qBAAA,eAArBA,qBAAA,CAAuBI,QAAQ,EAAE;QACnCf,2BAA2B,CAAC,IAAI,CAAC;MACnC;MACAE,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,CACDc,KAAK,CAACC,KAAK,IAAI;MACdL,OAAO,CAACK,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD;MACAf,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,IAAID,OAAO,EAAE;IACX,oBAAOP,OAAA;MAAKwB,SAAS,EAAC,SAAS;MAAAC,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAClD;EAEA,oBACE7B,OAAA,CAACT,MAAM;IAAAkC,QAAA,eACLzB,OAAA;MAAKwB,SAAS,EAAC,KAAK;MAAAC,QAAA,gBAClBzB,OAAA,CAACR,MAAM;QAAAiC,QAAA,gBAELzB,OAAA,CAACP,KAAK;UACJqC,IAAI,EAAC,GAAG;UACRC,OAAO,eAAE/B,OAAA,CAACH,WAAW;YAAA6B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1B,CAAC,eAGF7B,OAAA,CAACP,KAAK;UACJqC,IAAI,EAAC,gBAAgB;UACrBC,OAAO,eACL/B,OAAA,CAACJ,sBAAsB;YACrBoC,UAAU,EAAEvB,kBAAmB;YAC/BN,QAAQ,EAAEA;UAAS;YAAAuB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpB;QACF;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC,eAGF7B,OAAA,CAACP,KAAK;UACJqC,IAAI,EAAC,YAAY;UACjBC,OAAO,EACL1B,wBAAwB,gBACtBL,OAAA,CAACL,aAAa;YAACQ,QAAQ,EAAEA;UAAS;YAAAuB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,gBACrC7B,OAAA,CAACN,QAAQ;YAACuC,EAAE,EAAC,gBAAgB;YAACC,OAAO;UAAA;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAC1C;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC,eAGF7B,OAAA,CAACP,KAAK;UACJqC,IAAI,EAAC,GAAG;UACRC,OAAO,eAAE/B,OAAA,CAACN,QAAQ;YAACuC,EAAE,EAAC,GAAG;YAACC,OAAO;UAAA;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC,eACT7B,OAAA,CAACF,OAAO;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEb;AAAC3B,EAAA,CArFQD,GAAG;AAAAkC,EAAA,GAAHlC,GAAG;AAuFZ,eAAeA,GAAG;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}