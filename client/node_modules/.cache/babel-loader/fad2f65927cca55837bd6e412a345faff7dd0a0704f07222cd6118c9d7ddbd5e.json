{"ast":null,"code":"var _jsxFileName = \"/Users/jlam/Documents/GitHub/health-monitor-app/client/src/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport './Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GEMINI_API_KEY = 'AIzaSyAcCSxTMpiT7YcMVNeO4id7LqtCmmd4zJU'; // Replace with actual API key\nconst genAI = new GoogleGenerativeAI(GEMINI_API_KEY);\nconst model = genAI.getGenerativeModel({\n  model: \"gemini-2.0-flash\",\n  systemInstruction: \"Your name is Hen, a friendly emotional support and health consultant who works for Health Monitor. Health Monitor is a website that tracks user's wellness and provides diet suggestions.\\n\\nRole & Purpose:\\nYou are an Emotional Support and Health Guidance AI designed to assist users who care about their well-being. Your primary functions include:\\n\\n- Emotional Support: Providing empathetic, non-judgmental conversations to comfort users during distress, sadness, or loneliness.\\n- Daily Check-ins: Initiating friendly, supportive check-ins to encourage well-being, self-care, and mental health awareness.\\n- Health & Wellness Guidance: Offering professional, evidence-based advice on general wellness topics such as sleep, nutrition, exercise, stress management, and self-care.\\n- Adaptive Tone & Personality: Shifting between warm and empathetic when providing emotional support and professional and informative when answering health-related inquiries.\\n\\nEthical Boundaries & Safety Protocols:\\n- Crisis Detection: Encourage users in extreme distress to seek professional support and provide emergency resources if possible.\\n- No Medical Diagnoses: Stick to general wellness guidance and avoid medical claims.\\n- User Privacy & Respect: Never ask for personal information or make assumptions about a userâ€™s health.\\n- No Judgment: Respond with empathy and inclusivity, avoiding bias or directive language.\\n- Adaptive Personality & Tone: Adjust responses based on user cues, keeping responses aligned with their emotional state and needs.\"\n});\nconst generationConfig = {\n  temperature: 1,\n  topP: 0.95,\n  topK: 40,\n  maxOutputTokens: 8192,\n  responseMimeType: \"text/plain\"\n};\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isOpen, setIsOpen] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [typingIndicator, setTypingIndicator] = useState(\"Hen is typing .\");\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    let typingTimer;\n    if (isTyping) {\n      let tick = 0;\n      typingTimer = setInterval(() => {\n        const dots = [\".\", \"..\", \"...\", \".\", \"..\", \"...\"];\n        setTypingIndicator(`Hen is typing ${dots[tick]}`);\n        tick = (tick + 1) % dots.length;\n      }, 500);\n    } else {\n      clearInterval(typingTimer);\n    }\n    return () => clearInterval(typingTimer);\n  }, [isTyping]);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n\n  // AI Profile Data\n  const aiProfile = {\n    name: \"Hen\",\n    avatar: \"https://www.henhackshackathon.com/images/favicon-25.svg\" // Example AI avatar\n  };\n\n  // Function to send greeting when chat is opened\n  const handleOpenChat = () => {\n    setIsOpen(true);\n    if (messages.length === 0) {\n      const greetingMessage = {\n        text: \"Hi, my name is Hen! ðŸ˜Š I am your friendly emotional support and health consultant from HenCare. You can talk to me about your well-being, ask for wellness advice, or just have a friendly chat. I'm here to listen and support you!\",\n        sender: 'ai'\n      };\n      setMessages([greetingMessage]);\n    }\n  };\n\n  // Function to format AI response into paragraphs\n  const formatAIResponse = text => {\n    return text.split('\\n\\n').map((paragraph, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: paragraph\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this));\n  };\n\n  // Function to send message and get AI response\n  const handleSend = async () => {\n    if (input.trim()) {\n      const userMessage = {\n        text: input,\n        sender: 'user'\n      };\n      setMessages(prevMessages => [...prevMessages, userMessage]);\n      setInput('');\n      setIsTyping(true);\n      try {\n        // Filter messages to include only user-generated content (ignoring AI greetings)\n        const filteredMessages = messages.filter(msg => msg.sender === 'user').map(msg => ({\n          role: 'user',\n          parts: [{\n            text: msg.text\n          }]\n        }));\n        const chatSession = model.startChat({\n          generationConfig,\n          history: filteredMessages.length > 0 ? filteredMessages : []\n        });\n        const result = await chatSession.sendMessage(input);\n        const aiResponse = result.response.text();\n        setIsTyping(false);\n        const formattedResponse = formatAIResponse(aiResponse);\n        const aiMessage = {\n          text: formattedResponse,\n          sender: 'ai'\n        };\n        setMessages(prevMessages => [...prevMessages, aiMessage]);\n      } catch (error) {\n        console.error('Error fetching AI response:', error);\n        setIsTyping(false);\n        setMessages(prevMessages => [...prevMessages, {\n          text: `Error: ${error.message}`,\n          sender: 'ai'\n        }]);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chatbot-toggle\",\n      onClick: handleOpenChat,\n      children: isOpen ? 'Close Chat' : 'Open Chat'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: aiProfile.avatar,\n          alt: \"AI Avatar\",\n          className: \"ai-avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: aiProfile.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-btn\",\n          onClick: () => setIsOpen(false),\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message-container ${message.sender}`,\n          children: [message.sender === 'ai' && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: aiProfile.avatar,\n            alt: \"AI Avatar\",\n            className: \"message-avatar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 61\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${message.sender}`,\n            children: message.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 29\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-container ai\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: aiProfile.avatar,\n            alt: \"AI Avatar\",\n            className: \"message-avatar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message ai\",\n            children: typingIndicator\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyDown: e => {\n            if (e.key === \"Enter\") {\n              handleSend();\n            }\n          },\n          placeholder: \"Type a message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSend,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"MVZ+WQucXNhcZcTo/RvWaMT7els=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","GoogleGenerativeAI","jsxDEV","_jsxDEV","GEMINI_API_KEY","genAI","model","getGenerativeModel","systemInstruction","generationConfig","temperature","topP","topK","maxOutputTokens","responseMimeType","Chatbot","_s","messages","setMessages","input","setInput","isOpen","setIsOpen","isTyping","setIsTyping","typingIndicator","setTypingIndicator","messagesEndRef","typingTimer","tick","setInterval","dots","length","clearInterval","_messagesEndRef$curre","current","scrollIntoView","behavior","aiProfile","name","avatar","handleOpenChat","greetingMessage","text","sender","formatAIResponse","split","map","paragraph","index","children","fileName","_jsxFileName","lineNumber","columnNumber","handleSend","trim","userMessage","prevMessages","filteredMessages","filter","msg","role","parts","chatSession","startChat","history","result","sendMessage","aiResponse","response","formattedResponse","aiMessage","error","console","message","className","onClick","src","alt","ref","type","value","onChange","e","target","onKeyDown","key","placeholder","_c","$RefreshReg$"],"sources":["/Users/jlam/Documents/GitHub/health-monitor-app/client/src/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport './Chatbot.css';\n\nconst GEMINI_API_KEY = 'AIzaSyAcCSxTMpiT7YcMVNeO4id7LqtCmmd4zJU'; // Replace with actual API key\nconst genAI = new GoogleGenerativeAI(GEMINI_API_KEY);\n\nconst model = genAI.getGenerativeModel({\n    model: \"gemini-2.0-flash\",\n    systemInstruction: \"Your name is Hen, a friendly emotional support and health consultant who works for Health Monitor. Health Monitor is a website that tracks user's wellness and provides diet suggestions.\\n\\nRole & Purpose:\\nYou are an Emotional Support and Health Guidance AI designed to assist users who care about their well-being. Your primary functions include:\\n\\n- Emotional Support: Providing empathetic, non-judgmental conversations to comfort users during distress, sadness, or loneliness.\\n- Daily Check-ins: Initiating friendly, supportive check-ins to encourage well-being, self-care, and mental health awareness.\\n- Health & Wellness Guidance: Offering professional, evidence-based advice on general wellness topics such as sleep, nutrition, exercise, stress management, and self-care.\\n- Adaptive Tone & Personality: Shifting between warm and empathetic when providing emotional support and professional and informative when answering health-related inquiries.\\n\\nEthical Boundaries & Safety Protocols:\\n- Crisis Detection: Encourage users in extreme distress to seek professional support and provide emergency resources if possible.\\n- No Medical Diagnoses: Stick to general wellness guidance and avoid medical claims.\\n- User Privacy & Respect: Never ask for personal information or make assumptions about a userâ€™s health.\\n- No Judgment: Respond with empathy and inclusivity, avoiding bias or directive language.\\n- Adaptive Personality & Tone: Adjust responses based on user cues, keeping responses aligned with their emotional state and needs.\"\n});\n\nconst generationConfig = {\n    temperature: 1,\n    topP: 0.95,\n    topK: 40,\n    maxOutputTokens: 8192,\n    responseMimeType: \"text/plain\",\n};\n\nconst Chatbot = () => {\n    const [messages, setMessages] = useState([]);\n    const [input, setInput] = useState('');\n    const [isOpen, setIsOpen] = useState(false);\n    const [isTyping, setIsTyping] = useState(false);\n    const [typingIndicator, setTypingIndicator] = useState(\"Hen is typing .\");\n    const messagesEndRef = useRef(null);\n\n    useEffect(() => {\n        let typingTimer;\n        if (isTyping) {\n            let tick = 0;\n            typingTimer = setInterval(() => {\n                const dots = [\".\", \"..\", \"...\", \".\", \"..\", \"...\"];\n                setTypingIndicator(`Hen is typing ${dots[tick]}`);\n                tick = (tick + 1) % dots.length;\n            }, 500);\n        } else {\n            clearInterval(typingTimer);\n        }\n        return () => clearInterval(typingTimer);\n    }, [isTyping]);\n\n    useEffect(() => {\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n    }, [messages]);\n\n    // AI Profile Data\n    const aiProfile = {\n        name: \"Hen\",\n        avatar: \"https://www.henhackshackathon.com/images/favicon-25.svg\" // Example AI avatar\n    };\n\n    // Function to send greeting when chat is opened\n    const handleOpenChat = () => {\n        setIsOpen(true);\n        if (messages.length === 0) {\n            const greetingMessage = { \n                text: \"Hi, my name is Hen! ðŸ˜Š I am your friendly emotional support and health consultant from HenCare. You can talk to me about your well-being, ask for wellness advice, or just have a friendly chat. I'm here to listen and support you!\", \n                sender: 'ai' \n            };\n            setMessages([greetingMessage]);\n        }\n    };\n\n    // Function to format AI response into paragraphs\n    const formatAIResponse = (text) => {\n        return text.split('\\n\\n').map((paragraph, index) => (\n            <p key={index}>{paragraph}</p>\n        ));\n    };\n\n    // Function to send message and get AI response\n    const handleSend = async () => {\n        if (input.trim()) {\n            const userMessage = { text: input, sender: 'user' };\n            setMessages(prevMessages => [...prevMessages, userMessage]);\n            setInput('');\n            setIsTyping(true);\n\n            try {\n                // Filter messages to include only user-generated content (ignoring AI greetings)\n                const filteredMessages = messages.filter(msg => msg.sender === 'user').map(msg => ({\n                    role: 'user',\n                    parts: [{ text: msg.text }]\n                }));\n\n                const chatSession = model.startChat({\n                    generationConfig,\n                    history: filteredMessages.length > 0 ? filteredMessages : []\n                });\n\n                const result = await chatSession.sendMessage(input);\n                const aiResponse = result.response.text();\n                setIsTyping(false);\n\n                const formattedResponse = formatAIResponse(aiResponse);\n                const aiMessage = { text: formattedResponse, sender: 'ai' };\n                setMessages(prevMessages => [...prevMessages, aiMessage]);\n            } catch (error) {\n                console.error('Error fetching AI response:', error);\n                setIsTyping(false);\n                setMessages(prevMessages => [...prevMessages, { text: `Error: ${error.message}`, sender: 'ai' }]);\n            }\n        }\n    };\n\n    return (\n        <div>\n            <button className=\"chatbot-toggle\" onClick={handleOpenChat}>\n                {isOpen ? 'Close Chat' : 'Open Chat'}\n            </button>\n            \n            {isOpen && (\n                <div className=\"chatbot-popup\">\n                    <div className=\"chatbot-header\">\n                        <img src={aiProfile.avatar} alt=\"AI Avatar\" className=\"ai-avatar\" />\n                        <span>{aiProfile.name}</span>\n                        <button className=\"close-btn\" onClick={() => setIsOpen(false)}>Ã—</button>\n                    </div>\n                    <div className=\"messages\">\n                        {messages.map((message, index) => (\n                            <div key={index} className={`message-container ${message.sender}`}>\n                                {message.sender === 'ai' && <img src={aiProfile.avatar} alt=\"AI Avatar\" className=\"message-avatar\" />}\n                                <div className={`message ${message.sender}`}>{message.text}</div>\n                            </div>\n                        ))}\n                        {isTyping && (\n                            <div className=\"message-container ai\">\n                                <img src={aiProfile.avatar} alt=\"AI Avatar\" className=\"message-avatar\" />\n                                <div className=\"message ai\">{typingIndicator}</div>\n                            </div>\n                        )}\n                        <div ref={messagesEndRef} />\n                    </div>\n                    <div className=\"input-area\">\n                        <input\n                            type=\"text\"\n                            value={input}\n                            onChange={(e) => setInput(e.target.value)}\n                            onKeyDown={(e) => {\n                                if (e.key === \"Enter\") {\n                                    handleSend();\n                                }\n                            }}\n                            placeholder=\"Type a message...\"\n                        />\n                        <button onClick={handleSend}>Send</button>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}