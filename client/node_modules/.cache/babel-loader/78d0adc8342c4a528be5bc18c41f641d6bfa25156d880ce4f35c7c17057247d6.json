{"ast":null,"code":"var _jsxFileName = \"/Users/jlam/Documents/GitHub/health-monitor-app/client/src/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport './Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GEMINI_API_KEY = 'AIzaSyAcCSxTMpiT7YcMVNeO4id7LqtCmmd4zJU'; // Replace with actual API key\nconst genAI = new GoogleGenerativeAI(GEMINI_API_KEY);\nconst model = genAI.getGenerativeModel({\n  model: \"gemini-2.0-flash\",\n  systemInstruction: \"Your name is Hen, a friendly emotional support and health consultant who works for Health Monitor. Health Monitor is a website that tracks user's wellness and provides diet suggestions.\\n\\nRole & Purpose:\\nYou are an Emotional Support and Health Guidance AI designed to assist users who care about their well-being. Your primary functions include:\\n\\n- Emotional Support: Providing empathetic, non-judgmental conversations to comfort users during distress, sadness, or loneliness.\\n- Daily Check-ins: Initiating friendly, supportive check-ins to encourage well-being, self-care, and mental health awareness.\\n- Health & Wellness Guidance: Offering professional, evidence-based advice on general wellness topics such as sleep, nutrition, exercise, stress management, and self-care.\\n- Adaptive Tone & Personality: Shifting between warm and empathetic when providing emotional support and professional and informative when answering health-related inquiries.\\n\\nEthical Boundaries & Safety Protocols:\\n- Crisis Detection: Encourage users in extreme distress to seek professional support and provide emergency resources if possible.\\n- No Medical Diagnoses: Stick to general wellness guidance and avoid medical claims.\\n- User Privacy & Respect: Never ask for personal information or make assumptions about a userâ€™s health.\\n- No Judgment: Respond with empathy and inclusivity, avoiding bias or directive language.\\n- Adaptive Personality & Tone: Adjust responses based on user cues, keeping responses aligned with their emotional state and needs.\"\n});\nconst generationConfig = {\n  temperature: 1,\n  topP: 0.95,\n  topK: 40,\n  maxOutputTokens: 8192,\n  responseMimeType: \"text/plain\"\n};\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isOpen, setIsOpen] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [typingIndicator, setTypingIndicator] = useState(\"Hen is typing .\");\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    let typingTimer;\n    if (isTyping) {\n      let tick = 0;\n      typingTimer = setInterval(() => {\n        const dots = [\".\", \"..\", \"...\", \".\", \"..\", \"...\"];\n        setTypingIndicator(`Hen is typing ${dots[tick]}`);\n        tick = (tick + 1) % dots.length;\n      }, 500);\n    } else {\n      clearInterval(typingTimer);\n    }\n    return () => clearInterval(typingTimer);\n  }, [isTyping]);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n\n  // AI Profile Data\n  const aiProfile = {\n    name: \"Hen\",\n    avatar: \"https://www.henhackshackathon.com/images/favicon-25.svg\" // Example AI avatar\n  };\n\n  // Function to send message and get AI response\n  const handleSend = async () => {\n    if (input.trim()) {\n      const userMessage = {\n        text: input,\n        sender: 'user'\n      };\n      setMessages(prevMessages => [...prevMessages, userMessage]);\n      setInput('');\n      setIsTyping(true);\n      try {\n        const chatSession = model.startChat({\n          generationConfig,\n          history: messages.map(msg => ({\n            role: msg.sender === 'user' ? 'user' : 'model',\n            parts: [{\n              text: msg.text\n            }]\n          }))\n        });\n        const result = await chatSession.sendMessage(input);\n        const aiResponse = result.response.text();\n        setIsTyping(false);\n        const aiMessage = {\n          text: aiResponse,\n          sender: 'ai'\n        };\n        setMessages(prevMessages => [...prevMessages, aiMessage]);\n      } catch (error) {\n        console.error('Error fetching AI response:', error);\n        setIsTyping(false);\n        setMessages(prevMessages => [...prevMessages, {\n          text: 'Error fetching response',\n          sender: 'ai'\n        }]);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chatbot-toggle\",\n      onClick: () => setIsOpen(!isOpen),\n      children: isOpen ? 'Close Chat' : 'Open Chat'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: aiProfile.avatar,\n          alt: \"AI Avatar\",\n          className: \"ai-avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: aiProfile.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-btn\",\n          onClick: () => setIsOpen(false),\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message-container ${message.sender}`,\n          children: [message.sender === 'ai' && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: aiProfile.avatar,\n            alt: \"AI Avatar\",\n            className: \"message-avatar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 61\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${message.sender}`,\n            children: message.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 29\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-container ai\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: aiProfile.avatar,\n            alt: \"AI Avatar\",\n            className: \"message-avatar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message ai\",\n            children: typingIndicator\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          placeholder: \"Type a message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSend,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"MVZ+WQucXNhcZcTo/RvWaMT7els=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","GoogleGenerativeAI","jsxDEV","_jsxDEV","GEMINI_API_KEY","genAI","model","getGenerativeModel","systemInstruction","generationConfig","temperature","topP","topK","maxOutputTokens","responseMimeType","Chatbot","_s","messages","setMessages","input","setInput","isOpen","setIsOpen","isTyping","setIsTyping","typingIndicator","setTypingIndicator","messagesEndRef","typingTimer","tick","setInterval","dots","length","clearInterval","_messagesEndRef$curre","current","scrollIntoView","behavior","aiProfile","name","avatar","handleSend","trim","userMessage","text","sender","prevMessages","chatSession","startChat","history","map","msg","role","parts","result","sendMessage","aiResponse","response","aiMessage","error","console","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","message","index","ref","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["/Users/jlam/Documents/GitHub/health-monitor-app/client/src/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport './Chatbot.css';\n\nconst GEMINI_API_KEY = 'AIzaSyAcCSxTMpiT7YcMVNeO4id7LqtCmmd4zJU'; // Replace with actual API key\nconst genAI = new GoogleGenerativeAI(GEMINI_API_KEY);\n\nconst model = genAI.getGenerativeModel({\n    model: \"gemini-2.0-flash\",\n    systemInstruction: \"Your name is Hen, a friendly emotional support and health consultant who works for Health Monitor. Health Monitor is a website that tracks user's wellness and provides diet suggestions.\\n\\nRole & Purpose:\\nYou are an Emotional Support and Health Guidance AI designed to assist users who care about their well-being. Your primary functions include:\\n\\n- Emotional Support: Providing empathetic, non-judgmental conversations to comfort users during distress, sadness, or loneliness.\\n- Daily Check-ins: Initiating friendly, supportive check-ins to encourage well-being, self-care, and mental health awareness.\\n- Health & Wellness Guidance: Offering professional, evidence-based advice on general wellness topics such as sleep, nutrition, exercise, stress management, and self-care.\\n- Adaptive Tone & Personality: Shifting between warm and empathetic when providing emotional support and professional and informative when answering health-related inquiries.\\n\\nEthical Boundaries & Safety Protocols:\\n- Crisis Detection: Encourage users in extreme distress to seek professional support and provide emergency resources if possible.\\n- No Medical Diagnoses: Stick to general wellness guidance and avoid medical claims.\\n- User Privacy & Respect: Never ask for personal information or make assumptions about a userâ€™s health.\\n- No Judgment: Respond with empathy and inclusivity, avoiding bias or directive language.\\n- Adaptive Personality & Tone: Adjust responses based on user cues, keeping responses aligned with their emotional state and needs.\"\n});\n\n\nconst generationConfig = {\n    temperature: 1,\n    topP: 0.95,\n    topK: 40,\n    maxOutputTokens: 8192,\n    responseMimeType: \"text/plain\",\n};\n\n\n\nconst Chatbot = () => {\n    const [messages, setMessages] = useState([]);\n    const [input, setInput] = useState('');\n    const [isOpen, setIsOpen] = useState(false);\n    const [isTyping, setIsTyping] = useState(false);\n    const [typingIndicator, setTypingIndicator] = useState(\"Hen is typing .\");\n    const messagesEndRef = useRef(null);\n\n    useEffect(() => {\n        let typingTimer;\n        if (isTyping) {\n            let tick = 0;\n            typingTimer = setInterval(() => {\n                const dots = [\".\", \"..\", \"...\", \".\", \"..\", \"...\"];\n                setTypingIndicator(`Hen is typing ${dots[tick]}`);\n                tick = (tick + 1) % dots.length;\n            }, 500);\n        } else {\n            clearInterval(typingTimer);\n        }\n        return () => clearInterval(typingTimer);\n    }, [isTyping]);\n\n    useEffect(() => {\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n    }, [messages]);\n\n    // AI Profile Data\n    const aiProfile = {\n        name: \"Hen\",\n        avatar: \"https://www.henhackshackathon.com/images/favicon-25.svg\" // Example AI avatar\n    };\n\n    // Function to send message and get AI response\n    const handleSend = async () => {\n        if (input.trim()) {\n            const userMessage = { text: input, sender: 'user' };\n            setMessages(prevMessages => [...prevMessages, userMessage]);\n            setInput('');\n            setIsTyping(true);\n\n            try {\n                const chatSession = model.startChat({\n                    generationConfig,\n                    history: messages.map(msg => ({\n                        role: msg.sender === 'user' ? 'user' : 'model',\n                        parts: [{ text: msg.text }]\n                    }))\n                });\n                \n                const result = await chatSession.sendMessage(input);\n                const aiResponse = result.response.text();\n                setIsTyping(false);\n                \n                const aiMessage = { text: aiResponse, sender: 'ai' };\n                setMessages(prevMessages => [...prevMessages, aiMessage]);\n            } catch (error) {\n                console.error('Error fetching AI response:', error);\n                setIsTyping(false);\n                setMessages(prevMessages => [...prevMessages, { text: 'Error fetching response', sender: 'ai' }]);\n            }\n        }\n    };\n\n    return (\n        <div>\n            <button className=\"chatbot-toggle\" onClick={() => setIsOpen(!isOpen)}>\n                {isOpen ? 'Close Chat' : 'Open Chat'}\n            </button>\n            \n            {isOpen && (\n                <div className=\"chatbot-popup\">\n                    <div className=\"chatbot-header\">\n                        <img src={aiProfile.avatar} alt=\"AI Avatar\" className=\"ai-avatar\" />\n                        <span>{aiProfile.name}</span>\n                        <button className=\"close-btn\" onClick={() => setIsOpen(false)}>Ã—</button>\n                    </div>\n                    <div className=\"messages\">\n                        {messages.map((message, index) => (\n                            <div key={index} className={`message-container ${message.sender}`}>\n                                {message.sender === 'ai' && <img src={aiProfile.avatar} alt=\"AI Avatar\" className=\"message-avatar\" />}\n                                <div className={`message ${message.sender}`}>{message.text}</div>\n                            </div>\n                        ))}\n                        {isTyping && (\n                            <div className=\"message-container ai\">\n                                <img src={aiProfile.avatar} alt=\"AI Avatar\" className=\"message-avatar\" />\n                                <div className=\"message ai\">{typingIndicator}</div>\n                            </div>\n                        )}\n                        <div ref={messagesEndRef} />\n                    </div>\n                    <div className=\"input-area\">\n                        <input\n                            type=\"text\"\n                            value={input}\n                            onChange={(e) => setInput(e.target.value)}\n                            placeholder=\"Type a message...\"\n                        />\n                        <button onClick={handleSend}>Send</button>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}